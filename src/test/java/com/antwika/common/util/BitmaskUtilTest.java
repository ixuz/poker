package com.antwika.common.util;

import com.antwika.common.util.BitmaskUtil;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

import static com.antwika.common.util.BitmaskUtil.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitmaskUtilTest {
    @Test
    @Tag("UnitTest")
    public void construct() {
        try {
            // Act
            new BitmaskUtil();
        } catch (Exception e) {
            // Assert
            fail();
        }
    }

    @Test
    @Tag("UnitTest")
    public void test() {
        assertEquals(0L, NONE);
        assertEquals(0b000000001L, HIGH_CARD);
        assertEquals(0b000000010L, PAIR);
        assertEquals(0b000000100L, TWO_PAIR);
        assertEquals(0b000001000L, TRIPS);
        assertEquals(0b000010000L, STRAIGHT);
        assertEquals(0b000100000L, FLUSH);
        assertEquals(0b001000000L, FULL_HOUSE);
        assertEquals(0b010000000L, QUADS);
        assertEquals(0b100000000L, STRAIGHT_FLUSH);
        assertEquals(13L, FAMILY_SIZE);
        assertEquals(0, CLUBS_INDEX);
        assertEquals(1, DIAMONDS_INDEX);
        assertEquals(2, HEARTS_INDEX);
        assertEquals(3, SPADES_INDEX);
        assertEquals(0L, CLUBS_OFFSET);
        assertEquals(13L, DIAMONDS_OFFSET);
        assertEquals(26L, HEARTS_OFFSET);
        assertEquals(39L, SPADES_OFFSET);
        assertEquals(0b0000000000001L, TWO);
        assertEquals(0b0000000000010L, THREE);
        assertEquals(0b0000000000100L, FOUR);
        assertEquals(0b0000000001000L, FIVE);
        assertEquals(0b0000000010000L, SIX);
        assertEquals(0b0000000100000L, SEVEN);
        assertEquals(0b0000001000000L, EIGHT);
        assertEquals(0b0000010000000L, NINE);
        assertEquals(0b0000100000000L, TEN);
        assertEquals(0b0001000000000L, JACK);
        assertEquals(0b0010000000000L, QUEEN);
        assertEquals(0b0100000000000L, KING);
        assertEquals(0b1000000000000L, ACE);
        assertEquals(0b1111111111111L, FAMILY);
        assertEquals(0b0000000000000000000000000000000000000001111111111111L, CLUBS);
        assertEquals(0b0000000000000000000000000011111111111110000000000000L, DIAMONDS);
        assertEquals(0b0000000000000111111111111100000000000000000000000000L, HEARTS);
        assertEquals(0b1111111111111000000000000000000000000000000000000000L, SPADES);
        assertEquals(0b1111111111111111111111111111111111111111111111111111L, DECK);
        assertEquals(0b0000000000001000000000000100000000000010000000000001L, TWOS);
        assertEquals(0b0000000000010000000000001000000000000100000000000010L, THREES);
        assertEquals(0b0000000000100000000000010000000000001000000000000100L, FOURS);
        assertEquals(0b0000000001000000000000100000000000010000000000001000L, FIVES);
        assertEquals(0b0000000010000000000001000000000000100000000000010000L, SIXES);
        assertEquals(0b0000000100000000000010000000000001000000000000100000L, SEVENS);
        assertEquals(0b0000001000000000000100000000000010000000000001000000L, EIGHTS);
        assertEquals(0b0000010000000000001000000000000100000000000010000000L, NINES);
        assertEquals(0b0000100000000000010000000000001000000000000100000000L, TENS);
        assertEquals(0b0001000000000000100000000000010000000000001000000000L, JACKS);
        assertEquals(0b0010000000000001000000000000100000000000010000000000L, QUEENS);
        assertEquals(0b0100000000000010000000000001000000000000100000000000L, KINGS);
        assertEquals(0b1000000000000100000000000010000000000001000000000000L, ACES);
        assertEquals(0b0000000000000000000000000000000000000000000000000001L, TWO_CLUBS);
        assertEquals(0b0000000000000000000000000000000000000000000000000010L, THREE_CLUBS);
        assertEquals(0b0000000000000000000000000000000000000000000000000100L, FOUR_CLUBS);
        assertEquals(0b0000000000000000000000000000000000000000000000001000L, FIVE_CLUBS);
        assertEquals(0b0000000000000000000000000000000000000000000000010000L, SIX_CLUBS);
        assertEquals(0b0000000000000000000000000000000000000000000000100000L, SEVEN_CLUBS);
        assertEquals(0b0000000000000000000000000000000000000000000001000000L, EIGHT_CLUBS);
        assertEquals(0b0000000000000000000000000000000000000000000010000000L, NINE_CLUBS);
        assertEquals(0b0000000000000000000000000000000000000000000100000000L, TEN_CLUBS);
        assertEquals(0b0000000000000000000000000000000000000000001000000000L, JACK_CLUBS);
        assertEquals(0b0000000000000000000000000000000000000000010000000000L, QUEEN_CLUBS);
        assertEquals(0b0000000000000000000000000000000000000000100000000000L, KING_CLUBS);
        assertEquals(0b0000000000000000000000000000000000000001000000000000L, ACE_CLUBS);
        assertEquals(0b0000000000000000000000000000000000000010000000000000L, TWO_DIAMONDS);
        assertEquals(0b0000000000000000000000000000000000000100000000000000L, THREE_DIAMONDS);
        assertEquals(0b0000000000000000000000000000000000001000000000000000L, FOUR_DIAMONDS);
        assertEquals(0b0000000000000000000000000000000000010000000000000000L, FIVE_DIAMONDS);
        assertEquals(0b0000000000000000000000000000000000100000000000000000L, SIX_DIAMONDS);
        assertEquals(0b0000000000000000000000000000000001000000000000000000L, SEVEN_DIAMONDS);
        assertEquals(0b0000000000000000000000000000000010000000000000000000L, EIGHT_DIAMONDS);
        assertEquals(0b0000000000000000000000000000000100000000000000000000L, NINE_DIAMONDS);
        assertEquals(0b0000000000000000000000000000001000000000000000000000L, TEN_DIAMONDS);
        assertEquals(0b0000000000000000000000000000010000000000000000000000L, JACK_DIAMONDS);
        assertEquals(0b0000000000000000000000000000100000000000000000000000L, QUEEN_DIAMONDS);
        assertEquals(0b0000000000000000000000000001000000000000000000000000L, KING_DIAMONDS);
        assertEquals(0b0000000000000000000000000010000000000000000000000000L, ACE_DIAMONDS);
        assertEquals(0b0000000000000000000000000100000000000000000000000000L, TWO_HEARTS);
        assertEquals(0b0000000000000000000000001000000000000000000000000000L, THREE_HEARTS);
        assertEquals(0b0000000000000000000000010000000000000000000000000000L, FOUR_HEARTS);
        assertEquals(0b0000000000000000000000100000000000000000000000000000L, FIVE_HEARTS);
        assertEquals(0b0000000000000000000001000000000000000000000000000000L, SIX_HEARTS);
        assertEquals(0b0000000000000000000010000000000000000000000000000000L, SEVEN_HEARTS);
        assertEquals(0b0000000000000000000100000000000000000000000000000000L, EIGHT_HEARTS);
        assertEquals(0b0000000000000000001000000000000000000000000000000000L, NINE_HEARTS);
        assertEquals(0b0000000000000000010000000000000000000000000000000000L, TEN_HEARTS);
        assertEquals(0b0000000000000000100000000000000000000000000000000000L, JACK_HEARTS);
        assertEquals(0b0000000000000001000000000000000000000000000000000000L, QUEEN_HEARTS);
        assertEquals(0b0000000000000010000000000000000000000000000000000000L, KING_HEARTS);
        assertEquals(0b0000000000000100000000000000000000000000000000000000L, ACE_HEARTS);
        assertEquals(0b0000000000001000000000000000000000000000000000000000L, TWO_SPADES);
        assertEquals(0b0000000000010000000000000000000000000000000000000000L, THREE_SPADES);
        assertEquals(0b0000000000100000000000000000000000000000000000000000L, FOUR_SPADES);
        assertEquals(0b0000000001000000000000000000000000000000000000000000L, FIVE_SPADES);
        assertEquals(0b0000000010000000000000000000000000000000000000000000L, SIX_SPADES);
        assertEquals(0b0000000100000000000000000000000000000000000000000000L, SEVEN_SPADES);
        assertEquals(0b0000001000000000000000000000000000000000000000000000L, EIGHT_SPADES);
        assertEquals(0b0000010000000000000000000000000000000000000000000000L, NINE_SPADES);
        assertEquals(0b0000100000000000000000000000000000000000000000000000L, TEN_SPADES);
        assertEquals(0b0001000000000000000000000000000000000000000000000000L, JACK_SPADES);
        assertEquals(0b0010000000000000000000000000000000000000000000000000L, QUEEN_SPADES);
        assertEquals(0b0100000000000000000000000000000000000000000000000000L, KING_SPADES);
        assertEquals(0b1000000000000000000000000000000000000000000000000000L, ACE_SPADES);
        assertEquals(0b0000000000000000000000000000000000000001000000001111L, FIVE_HIGH_STRAIGHT_FLUSH_CLUBS);
        assertEquals(0b0000000000000000000000000000000000000000000000011111L, SIX_HIGH_STRAIGHT_FLUSH_CLUBS);
        assertEquals(0b0000000000000000000000000000000000000000000000111110L, SEVEN_HIGH_STRAIGHT_FLUSH_CLUBS);
        assertEquals(0b0000000000000000000000000000000000000000000001111100L, EIGHT_HIGH_STRAIGHT_FLUSH_CLUBS);
        assertEquals(0b0000000000000000000000000000000000000000000011111000L, NINE_HIGH_STRAIGHT_FLUSH_CLUBS);
        assertEquals(0b0000000000000000000000000000000000000000000111110000L, TEN_HIGH_STRAIGHT_FLUSH_CLUBS);
        assertEquals(0b0000000000000000000000000000000000000000001111100000L, JACK_HIGH_STRAIGHT_FLUSH_CLUBS);
        assertEquals(0b0000000000000000000000000000000000000000011111000000L, QUEEN_HIGH_STRAIGHT_FLUSH_CLUBS);
        assertEquals(0b0000000000000000000000000000000000000000111110000000L, KING_HIGH_STRAIGHT_FLUSH_CLUBS);
        assertEquals(0b0000000000000000000000000000000000000001111100000000L, ACE_HIGH_STRAIGHT_FLUSH_CLUBS);
        assertEquals(0b0000000000000000000000000010000000011110000000000000L, FIVE_HIGH_STRAIGHT_FLUSH_DIAMONDS);
        assertEquals(0b0000000000000000000000000000000000111110000000000000L, SIX_HIGH_STRAIGHT_FLUSH_DIAMONDS);
        assertEquals(0b0000000000000000000000000000000001111100000000000000L, SEVEN_HIGH_STRAIGHT_FLUSH_DIAMONDS);
        assertEquals(0b0000000000000000000000000000000011111000000000000000L, EIGHT_HIGH_STRAIGHT_FLUSH_DIAMONDS);
        assertEquals(0b0000000000000000000000000000000111110000000000000000L, NINE_HIGH_STRAIGHT_FLUSH_DIAMONDS);
        assertEquals(0b0000000000000000000000000000001111100000000000000000L, TEN_HIGH_STRAIGHT_FLUSH_DIAMONDS);
        assertEquals(0b0000000000000000000000000000011111000000000000000000L, JACK_HIGH_STRAIGHT_FLUSH_DIAMONDS);
        assertEquals(0b0000000000000000000000000000111110000000000000000000L, QUEEN_HIGH_STRAIGHT_FLUSH_DIAMONDS);
        assertEquals(0b0000000000000000000000000001111100000000000000000000L, KING_HIGH_STRAIGHT_FLUSH_DIAMONDS);
        assertEquals(0b0000000000000000000000000011111000000000000000000000L, ACE_HIGH_STRAIGHT_FLUSH_DIAMONDS);
        assertEquals(0b0000000000000100000000111100000000000000000000000000L, FIVE_HIGH_STRAIGHT_FLUSH_HEARTS);
        assertEquals(0b0000000000000000000001111100000000000000000000000000L, SIX_HIGH_STRAIGHT_FLUSH_HEARTS);
        assertEquals(0b0000000000000000000011111000000000000000000000000000L, SEVEN_HIGH_STRAIGHT_FLUSH_HEARTS);
        assertEquals(0b0000000000000000000111110000000000000000000000000000L, EIGHT_HIGH_STRAIGHT_FLUSH_HEARTS);
        assertEquals(0b0000000000000000001111100000000000000000000000000000L, NINE_HIGH_STRAIGHT_FLUSH_HEARTS);
        assertEquals(0b0000000000000000011111000000000000000000000000000000L, TEN_HIGH_STRAIGHT_FLUSH_HEARTS);
        assertEquals(0b0000000000000000111110000000000000000000000000000000L, JACK_HIGH_STRAIGHT_FLUSH_HEARTS);
        assertEquals(0b0000000000000001111100000000000000000000000000000000L, QUEEN_HIGH_STRAIGHT_FLUSH_HEARTS);
        assertEquals(0b0000000000000011111000000000000000000000000000000000L, KING_HIGH_STRAIGHT_FLUSH_HEARTS);
        assertEquals(0b0000000000000111110000000000000000000000000000000000L, ACE_HIGH_STRAIGHT_FLUSH_HEARTS);
        assertEquals(0b1000000001111000000000000000000000000000000000000000L, FIVE_HIGH_STRAIGHT_FLUSH_SPADES);
        assertEquals(0b0000000011111000000000000000000000000000000000000000L, SIX_HIGH_STRAIGHT_FLUSH_SPADES);
        assertEquals(0b0000000111110000000000000000000000000000000000000000L, SEVEN_HIGH_STRAIGHT_FLUSH_SPADES);
        assertEquals(0b0000001111100000000000000000000000000000000000000000L, EIGHT_HIGH_STRAIGHT_FLUSH_SPADES);
        assertEquals(0b0000011111000000000000000000000000000000000000000000L, NINE_HIGH_STRAIGHT_FLUSH_SPADES);
        assertEquals(0b0000111110000000000000000000000000000000000000000000L, TEN_HIGH_STRAIGHT_FLUSH_SPADES);
        assertEquals(0b0001111100000000000000000000000000000000000000000000L, JACK_HIGH_STRAIGHT_FLUSH_SPADES);
        assertEquals(0b0011111000000000000000000000000000000000000000000000L, QUEEN_HIGH_STRAIGHT_FLUSH_SPADES);
        assertEquals(0b0111110000000000000000000000000000000000000000000000L, KING_HIGH_STRAIGHT_FLUSH_SPADES);
        assertEquals(0b1111100000000000000000000000000000000000000000000000L, ACE_HIGH_STRAIGHT_FLUSH_SPADES);
    }
}
